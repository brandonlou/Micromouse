
Rat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004658  08004658  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004660  08004660  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  08004674  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004674  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2cb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fdd  00000000  00000000  0002d307  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  0002f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  00030068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002aa0  00000000  00000000  00030cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af2d  00000000  00000000  00033770  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fb91  00000000  00000000  0003e69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce22e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003910  00000000  00000000  000ce2ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004628 	.word	0x08004628

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004628 	.word	0x08004628

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b38:	f000 b972 	b.w	8000e20 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9e08      	ldr	r6, [sp, #32]
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	4688      	mov	r8, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d14b      	bne.n	8000bfa <__udivmoddi4+0xa6>
 8000b62:	428a      	cmp	r2, r1
 8000b64:	4615      	mov	r5, r2
 8000b66:	d967      	bls.n	8000c38 <__udivmoddi4+0xe4>
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	b14a      	cbz	r2, 8000b82 <__udivmoddi4+0x2e>
 8000b6e:	f1c2 0720 	rsb	r7, r2, #32
 8000b72:	fa01 f302 	lsl.w	r3, r1, r2
 8000b76:	fa20 f707 	lsr.w	r7, r0, r7
 8000b7a:	4095      	lsls	r5, r2
 8000b7c:	ea47 0803 	orr.w	r8, r7, r3
 8000b80:	4094      	lsls	r4, r2
 8000b82:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b8c:	fa1f fc85 	uxth.w	ip, r5
 8000b90:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b98:	fb07 f10c 	mul.w	r1, r7, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d909      	bls.n	8000bb4 <__udivmoddi4+0x60>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ba6:	f080 811b 	bcs.w	8000de0 <__udivmoddi4+0x28c>
 8000baa:	4299      	cmp	r1, r3
 8000bac:	f240 8118 	bls.w	8000de0 <__udivmoddi4+0x28c>
 8000bb0:	3f02      	subs	r7, #2
 8000bb2:	442b      	add	r3, r5
 8000bb4:	1a5b      	subs	r3, r3, r1
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc8:	45a4      	cmp	ip, r4
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x8c>
 8000bcc:	192c      	adds	r4, r5, r4
 8000bce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd2:	f080 8107 	bcs.w	8000de4 <__udivmoddi4+0x290>
 8000bd6:	45a4      	cmp	ip, r4
 8000bd8:	f240 8104 	bls.w	8000de4 <__udivmoddi4+0x290>
 8000bdc:	3802      	subs	r0, #2
 8000bde:	442c      	add	r4, r5
 8000be0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000be4:	eba4 040c 	sub.w	r4, r4, ip
 8000be8:	2700      	movs	r7, #0
 8000bea:	b11e      	cbz	r6, 8000bf4 <__udivmoddi4+0xa0>
 8000bec:	40d4      	lsrs	r4, r2
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0xbe>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	f000 80eb 	beq.w	8000dda <__udivmoddi4+0x286>
 8000c04:	2700      	movs	r7, #0
 8000c06:	e9c6 0100 	strd	r0, r1, [r6]
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	fab3 f783 	clz	r7, r3
 8000c16:	2f00      	cmp	r7, #0
 8000c18:	d147      	bne.n	8000caa <__udivmoddi4+0x156>
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d302      	bcc.n	8000c24 <__udivmoddi4+0xd0>
 8000c1e:	4282      	cmp	r2, r0
 8000c20:	f200 80fa 	bhi.w	8000e18 <__udivmoddi4+0x2c4>
 8000c24:	1a84      	subs	r4, r0, r2
 8000c26:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	4698      	mov	r8, r3
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d0e0      	beq.n	8000bf4 <__udivmoddi4+0xa0>
 8000c32:	e9c6 4800 	strd	r4, r8, [r6]
 8000c36:	e7dd      	b.n	8000bf4 <__udivmoddi4+0xa0>
 8000c38:	b902      	cbnz	r2, 8000c3c <__udivmoddi4+0xe8>
 8000c3a:	deff      	udf	#255	; 0xff
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	f040 808f 	bne.w	8000d64 <__udivmoddi4+0x210>
 8000c46:	1b49      	subs	r1, r1, r5
 8000c48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4c:	fa1f f885 	uxth.w	r8, r5
 8000c50:	2701      	movs	r7, #1
 8000c52:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c56:	0c23      	lsrs	r3, r4, #16
 8000c58:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c60:	fb08 f10c 	mul.w	r1, r8, ip
 8000c64:	4299      	cmp	r1, r3
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c68:	18eb      	adds	r3, r5, r3
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x122>
 8000c70:	4299      	cmp	r1, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2bc>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1a59      	subs	r1, r3, r1
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x14c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x14a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80b6 	bhi.w	8000e0a <__udivmoddi4+0x2b6>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e79f      	b.n	8000bea <__udivmoddi4+0x96>
 8000caa:	f1c7 0c20 	rsb	ip, r7, #32
 8000cae:	40bb      	lsls	r3, r7
 8000cb0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cb4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cb8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cbc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cc4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cc8:	4325      	orrs	r5, r4
 8000cca:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cce:	0c2c      	lsrs	r4, r5, #16
 8000cd0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cd4:	fa1f fa8e 	uxth.w	sl, lr
 8000cd8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cdc:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	fa02 f207 	lsl.w	r2, r2, r7
 8000ce6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b0>
 8000cec:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cf4:	f080 8087 	bcs.w	8000e06 <__udivmoddi4+0x2b2>
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f240 8084 	bls.w	8000e06 <__udivmoddi4+0x2b2>
 8000cfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000d02:	4473      	add	r3, lr
 8000d04:	1b1b      	subs	r3, r3, r4
 8000d06:	b2ad      	uxth	r5, r5
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d14:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d18:	45a2      	cmp	sl, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1da>
 8000d1c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d24:	d26b      	bcs.n	8000dfe <__udivmoddi4+0x2aa>
 8000d26:	45a2      	cmp	sl, r4
 8000d28:	d969      	bls.n	8000dfe <__udivmoddi4+0x2aa>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4474      	add	r4, lr
 8000d2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d32:	fba0 8902 	umull	r8, r9, r0, r2
 8000d36:	eba4 040a 	sub.w	r4, r4, sl
 8000d3a:	454c      	cmp	r4, r9
 8000d3c:	46c2      	mov	sl, r8
 8000d3e:	464b      	mov	r3, r9
 8000d40:	d354      	bcc.n	8000dec <__udivmoddi4+0x298>
 8000d42:	d051      	beq.n	8000de8 <__udivmoddi4+0x294>
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	d069      	beq.n	8000e1c <__udivmoddi4+0x2c8>
 8000d48:	ebb1 050a 	subs.w	r5, r1, sl
 8000d4c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d50:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d54:	40fd      	lsrs	r5, r7
 8000d56:	40fc      	lsrs	r4, r7
 8000d58:	ea4c 0505 	orr.w	r5, ip, r5
 8000d5c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d60:	2700      	movs	r7, #0
 8000d62:	e747      	b.n	8000bf4 <__udivmoddi4+0xa0>
 8000d64:	f1c2 0320 	rsb	r3, r2, #32
 8000d68:	fa20 f703 	lsr.w	r7, r0, r3
 8000d6c:	4095      	lsls	r5, r2
 8000d6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d72:	fa21 f303 	lsr.w	r3, r1, r3
 8000d76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d7a:	4338      	orrs	r0, r7
 8000d7c:	0c01      	lsrs	r1, r0, #16
 8000d7e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d82:	fa1f f885 	uxth.w	r8, r5
 8000d86:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8e:	fb07 f308 	mul.w	r3, r7, r8
 8000d92:	428b      	cmp	r3, r1
 8000d94:	fa04 f402 	lsl.w	r4, r4, r2
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x256>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000da0:	d22f      	bcs.n	8000e02 <__udivmoddi4+0x2ae>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d92d      	bls.n	8000e02 <__udivmoddi4+0x2ae>
 8000da6:	3f02      	subs	r7, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1acb      	subs	r3, r1, r3
 8000dac:	b281      	uxth	r1, r0
 8000dae:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dba:	fb00 f308 	mul.w	r3, r0, r8
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x27e>
 8000dc2:	1869      	adds	r1, r5, r1
 8000dc4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dc8:	d217      	bcs.n	8000dfa <__udivmoddi4+0x2a6>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d915      	bls.n	8000dfa <__udivmoddi4+0x2a6>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4429      	add	r1, r5
 8000dd2:	1ac9      	subs	r1, r1, r3
 8000dd4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dd8:	e73b      	b.n	8000c52 <__udivmoddi4+0xfe>
 8000dda:	4637      	mov	r7, r6
 8000ddc:	4630      	mov	r0, r6
 8000dde:	e709      	b.n	8000bf4 <__udivmoddi4+0xa0>
 8000de0:	4607      	mov	r7, r0
 8000de2:	e6e7      	b.n	8000bb4 <__udivmoddi4+0x60>
 8000de4:	4618      	mov	r0, r3
 8000de6:	e6fb      	b.n	8000be0 <__udivmoddi4+0x8c>
 8000de8:	4541      	cmp	r1, r8
 8000dea:	d2ab      	bcs.n	8000d44 <__udivmoddi4+0x1f0>
 8000dec:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df0:	eb69 020e 	sbc.w	r2, r9, lr
 8000df4:	3801      	subs	r0, #1
 8000df6:	4613      	mov	r3, r2
 8000df8:	e7a4      	b.n	8000d44 <__udivmoddi4+0x1f0>
 8000dfa:	4660      	mov	r0, ip
 8000dfc:	e7e9      	b.n	8000dd2 <__udivmoddi4+0x27e>
 8000dfe:	4618      	mov	r0, r3
 8000e00:	e795      	b.n	8000d2e <__udivmoddi4+0x1da>
 8000e02:	4667      	mov	r7, ip
 8000e04:	e7d1      	b.n	8000daa <__udivmoddi4+0x256>
 8000e06:	4681      	mov	r9, r0
 8000e08:	e77c      	b.n	8000d04 <__udivmoddi4+0x1b0>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	442c      	add	r4, r5
 8000e0e:	e747      	b.n	8000ca0 <__udivmoddi4+0x14c>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	442b      	add	r3, r5
 8000e16:	e72f      	b.n	8000c78 <__udivmoddi4+0x124>
 8000e18:	4638      	mov	r0, r7
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xda>
 8000e1c:	4637      	mov	r7, r6
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0xa0>

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <HAL_GPIO_EXTI_Callback>:
/*
 * Callback function triggered by a rising or falling edge of a signal coming from your encoders.
 * We have implemented the logic for you that will increment or decrement the proper encoder counts based on the change.
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EncoderRF_Pin || GPIO_Pin == EncoderRB_Pin)
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	2b08      	cmp	r3, #8
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_EXTI_Callback+0x18>
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e3a:	d13e      	bne.n	8000eba <HAL_GPIO_EXTI_Callback+0x96>
	{
		int8_t RF = HAL_GPIO_ReadPin(EncoderRF_GPIO_Port, EncoderRF_Pin);
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4842      	ldr	r0, [pc, #264]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x124>)
 8000e40:	f002 f80c 	bl	8002e5c <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	733b      	strb	r3, [r7, #12]
		int8_t RB = HAL_GPIO_ReadPin(EncoderRB_GPIO_Port, EncoderRB_Pin);
 8000e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e4c:	483f      	ldr	r0, [pc, #252]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x128>)
 8000e4e:	f002 f805 	bl	8002e5c <HAL_GPIO_ReadPin>
 8000e52:	4603      	mov	r3, r0
 8000e54:	72fb      	strb	r3, [r7, #11]
		int8_t EncoderRCurr = (RF<<1) | RB;
 8000e56:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	b25a      	sxtb	r2, r3
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	72bb      	strb	r3, [r7, #10]

		if(EncoderRCurr!= EncoderRPrev && (EncoderRCurr ^ EncoderRPrev) != 0x3)
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b25b      	sxtb	r3, r3
 8000e6a:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d01e      	beq.n	8000eb0 <HAL_GPIO_EXTI_Callback+0x8c>
 8000e72:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25a      	sxtb	r2, r3
 8000e78:	7abb      	ldrb	r3, [r7, #10]
 8000e7a:	4053      	eors	r3, r2
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d016      	beq.n	8000eb0 <HAL_GPIO_EXTI_Callback+0x8c>
			(((EncoderRPrev & 0x1) ^ ((EncoderRCurr & 0x2) >> 1)) == 1)? --EncoderRCounts:++EncoderRCounts;
 8000e82:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	7abb      	ldrb	r3, [r7, #10]
 8000e8e:	105b      	asrs	r3, r3, #1
 8000e90:	4053      	eors	r3, r2
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d105      	bne.n	8000ea6 <HAL_GPIO_EXTI_Callback+0x82>
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x130>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4a2c      	ldr	r2, [pc, #176]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_EXTI_Callback+0x8c>
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a29      	ldr	r2, [pc, #164]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x130>)
 8000eae:	6013      	str	r3, [r2, #0]

		EncoderRPrev = EncoderRCurr;
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000eb2:	7abb      	ldrb	r3, [r7, #10]
 8000eb4:	7013      	strb	r3, [r2, #0]
	{
 8000eb6:	bf00      	nop
		if(EncoderLCurr!= EncoderLPrev && (EncoderLCurr ^ EncoderLPrev) != 0x3)
			(((EncoderLPrev & 0x1) ^ ((EncoderLCurr & 0x2) >> 1)) == 1)? --EncoderLCounts:++EncoderLCounts;

		EncoderLPrev = EncoderLCurr;
	}
}
 8000eb8:	e041      	b.n	8000f3e <HAL_GPIO_EXTI_Callback+0x11a>
	else if(GPIO_Pin == EncoderLF_Pin || GPIO_Pin == EncoderLB_Pin)
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d002      	beq.n	8000ec6 <HAL_GPIO_EXTI_Callback+0xa2>
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	2b10      	cmp	r3, #16
 8000ec4:	d13b      	bne.n	8000f3e <HAL_GPIO_EXTI_Callback+0x11a>
		int8_t LF = HAL_GPIO_ReadPin(EncoderLF_GPIO_Port, EncoderLF_Pin);
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	4820      	ldr	r0, [pc, #128]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x128>)
 8000eca:	f001 ffc7 	bl	8002e5c <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
		int8_t LB = HAL_GPIO_ReadPin(EncoderLB_GPIO_Port, EncoderLB_Pin);
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	4820      	ldr	r0, [pc, #128]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x134>)
 8000ed6:	f001 ffc1 	bl	8002e5c <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	73bb      	strb	r3, [r7, #14]
		int8_t EncoderLCurr = (LF<<1) | LB;
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	b25a      	sxtb	r2, r3
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	737b      	strb	r3, [r7, #13]
		if(EncoderLCurr!= EncoderLPrev && (EncoderLCurr ^ EncoderLPrev) != 0x3)
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x138>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d01e      	beq.n	8000f38 <HAL_GPIO_EXTI_Callback+0x114>
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x138>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	4053      	eors	r3, r2
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d016      	beq.n	8000f38 <HAL_GPIO_EXTI_Callback+0x114>
			(((EncoderLPrev & 0x1) ^ ((EncoderLCurr & 0x2) >> 1)) == 1)? --EncoderLCounts:++EncoderLCounts;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x138>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	461a      	mov	r2, r3
 8000f14:	7b7b      	ldrb	r3, [r7, #13]
 8000f16:	105b      	asrs	r3, r3, #1
 8000f18:	4053      	eors	r3, r2
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d105      	bne.n	8000f2e <HAL_GPIO_EXTI_Callback+0x10a>
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_EXTI_Callback+0x114>
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000f36:	6013      	str	r3, [r2, #0]
		EncoderLPrev = EncoderLCurr;
 8000f38:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x138>)
 8000f3a:	7b7b      	ldrb	r3, [r7, #13]
 8000f3c:	7013      	strb	r3, [r2, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	20000040 	.word	0x20000040
 8000f54:	2000003c 	.word	0x2000003c
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	20000048 	.word	0x20000048
 8000f60:	20000044 	.word	0x20000044

08000f64 <GetEncoderRCounts>:

/* Allows you to get the right encoder counts from outside this c file. */
int32_t GetEncoderRCounts(void) {
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

	return EncoderRCounts;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <GetEncoderRCounts+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]

}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2000003c 	.word	0x2000003c

08000f7c <GetEncoderLCounts>:

/* Allows you to get the left encoder counts from outside this c file. */
int32_t GetEncoderLCounts(void) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

	return EncoderLCounts;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <GetEncoderLCounts+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]

}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000044 	.word	0x20000044

08000f94 <Delay>:
#include "main.h"


#pragma GCC push_options
#pragma GCC optimize ("O0")
void Delay() { //this is how you can do a delay, modify the DELAY_COUNT in the .h file if your readings aren't consistent
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
	volatile uint32_t counter = DELAY_COUNT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
	while(counter--);
 8000f9e:	bf00      	nop
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1fa      	bne.n	8000fa0 <Delay+0xc>
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <Irs_Read_Right>:
#pragma GCC pop_options


uint32_t Irs_Read_Right(void) //these functions should use IRs_Read to read the right IR (just one line)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
	return Irs_Read(IR_RIGHT);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f81c 	bl	8000ff8 <Irs_Read>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <Irs_Read_FrontR>:


uint32_t Irs_Read_FrontR(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
	return Irs_Read(IR_FRONTR);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f000 f814 	bl	8000ff8 <Irs_Read>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <Irs_Read_FrontL>:


uint32_t Irs_Read_FrontL(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
	return Irs_Read(IR_FRONTL);
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f000 f80c 	bl	8000ff8 <Irs_Read>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <Irs_Read_Left>:


uint32_t Irs_Read_Left(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
	return Irs_Read(IR_LEFT);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f000 f804 	bl	8000ff8 <Irs_Read>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <Irs_Read>:

// this function should handle turning on an IR emitter with the correct port and pin (depending on which IR is passed to it),
// it should then call Analog_Read to read the IR value from the right IR, and finally turn off the IR emitter.
// don't forget to delay between turning on, reading, and turning off your IRs!
uint32_t Irs_Read(Ir ir)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]

	GPIO_TypeDef* port;
	uint16_t pin;

	switch(ir) {
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d821      	bhi.n	800104c <Irs_Read+0x54>
 8001008:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <Irs_Read+0x18>)
 800100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100e:	bf00      	nop
 8001010:	08001021 	.word	0x08001021
 8001014:	0800102d 	.word	0x0800102d
 8001018:	08001039 	.word	0x08001039
 800101c:	08001043 	.word	0x08001043
		case IR_RIGHT:
			port = IrRightE_GPIO_Port;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <Irs_Read+0x88>)
 8001022:	617b      	str	r3, [r7, #20]
			pin = IrRightE_Pin;
 8001024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001028:	827b      	strh	r3, [r7, #18]
			break;
 800102a:	e00f      	b.n	800104c <Irs_Read+0x54>

		case IR_FRONTR:
			port = IrFrontRE_GPIO_Port;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <Irs_Read+0x88>)
 800102e:	617b      	str	r3, [r7, #20]
			pin = IrFrontRE_Pin;
 8001030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001034:	827b      	strh	r3, [r7, #18]
			break;
 8001036:	e009      	b.n	800104c <Irs_Read+0x54>

		case IR_FRONTL:
			port = IrFrontLE_GPIO_Port;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <Irs_Read+0x8c>)
 800103a:	617b      	str	r3, [r7, #20]
			pin = IrFrontLE_Pin;
 800103c:	2301      	movs	r3, #1
 800103e:	827b      	strh	r3, [r7, #18]
			break;
 8001040:	e004      	b.n	800104c <Irs_Read+0x54>

		case IR_LEFT:
			port = IrLeftE_GPIO_Port;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <Irs_Read+0x8c>)
 8001044:	617b      	str	r3, [r7, #20]
			pin = IrLeftE_Pin;
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	827b      	strh	r3, [r7, #18]
			break;
 800104a:	bf00      	nop
	}

	// Turn on LED
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 800104c:	8a7b      	ldrh	r3, [r7, #18]
 800104e:	2201      	movs	r2, #1
 8001050:	4619      	mov	r1, r3
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f001 ff1a 	bl	8002e8c <HAL_GPIO_WritePin>

	// Wait a bit...
	Delay();
 8001058:	f7ff ff9c 	bl	8000f94 <Delay>

	// Get reading and turn of LED
	uint32_t value = Analog_Read(ir);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f812 	bl	8001088 <Analog_Read>
 8001064:	60f8      	str	r0, [r7, #12]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8001066:	8a7b      	ldrh	r3, [r7, #18]
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	6978      	ldr	r0, [r7, #20]
 800106e:	f001 ff0d 	bl	8002e8c <HAL_GPIO_WritePin>

	// Wait again...
	Delay();
 8001072:	f7ff ff8f 	bl	8000f94 <Delay>

	return value;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020800 	.word	0x40020800
 8001084:	40020400 	.word	0x40020400

08001088 <Analog_Read>:

uint32_t Analog_Read(Ir ir)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	uint32_t channel;

	switch(ir)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d817      	bhi.n	80010c8 <Analog_Read+0x40>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <Analog_Read+0x18>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010b7 	.word	0x080010b7
 80010a8:	080010bd 	.word	0x080010bd
 80010ac:	080010c3 	.word	0x080010c3
	{
		case IR_RIGHT: //this picks the IR direction to choose the right ADC.
			channel = ADC_CHANNEL_0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80010b4:	e00a      	b.n	80010cc <Analog_Read+0x44>
		case IR_FRONTR:
			channel = ADC_CHANNEL_4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80010ba:	e007      	b.n	80010cc <Analog_Read+0x44>
		case IR_FRONTL:
			channel = ADC_CHANNEL_11;
 80010bc:	230b      	movs	r3, #11
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80010c0:	e004      	b.n	80010cc <Analog_Read+0x44>
		case IR_LEFT:
			channel = ADC_CHANNEL_10;
 80010c2:	230a      	movs	r3, #10
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80010c6:	e001      	b.n	80010cc <Analog_Read+0x44>
		default:
			return 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e036      	b.n	800113a <Analog_Read+0xb2>
	}

	ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
	ADC_HandleTypeDef *hadc1_ptr = Get_HAdc1_Ptr(); //this is a pointer to your hal_adc, you will need this when you call HAL_ADC_PollForConversion
 80010da:	f000 fb3b 	bl	8001754 <Get_HAdc1_Ptr>
 80010de:	61b8      	str	r0, [r7, #24]
	//this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

	sConfig.Channel = channel;
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4619      	mov	r1, r3
 80010f2:	69b8      	ldr	r0, [r7, #24]
 80010f4:	f001 f9f0 	bl	80024d8 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(hadc1_ptr); //this starts the ADC
 80010f8:	69b8      	ldr	r0, [r7, #24]
 80010fa:	f001 f883 	bl	8002204 <HAL_ADC_Start>

	uint32_t sum = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
	uint8_t measurements = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	77fb      	strb	r3, [r7, #31]

	while(measurements < NUM_SAMPLES) //this takes multiple measurements
 8001106:	e011      	b.n	800112c <Analog_Read+0xa4>
	{
		if(HAL_ADC_PollForConversion(hadc1_ptr,HAL_MAX_DELAY) == HAL_OK) //this makes sure the ADC has recieved a value
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	69b8      	ldr	r0, [r7, #24]
 800110e:	f001 f952 	bl	80023b6 <HAL_ADC_PollForConversion>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d109      	bne.n	800112c <Analog_Read+0xa4>
		{
			sum += HAL_ADC_GetValue(hadc1_ptr); // this is actually doing the reading
 8001118:	69b8      	ldr	r0, [r7, #24]
 800111a:	f001 f9d0 	bl	80024be <HAL_ADC_GetValue>
 800111e:	4602      	mov	r2, r0
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	4413      	add	r3, r2
 8001124:	623b      	str	r3, [r7, #32]
			++measurements;
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	3301      	adds	r3, #1
 800112a:	77fb      	strb	r3, [r7, #31]
	while(measurements < NUM_SAMPLES) //this takes multiple measurements
 800112c:	7ffb      	ldrb	r3, [r7, #31]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0ea      	beq.n	8001108 <Analog_Read+0x80>
		}
	}

	HAL_ADC_Stop(hadc1_ptr); //this stops the ADC
 8001132:	69b8      	ldr	r0, [r7, #24]
 8001134:	f001 f90c 	bl	8002350 <HAL_ADC_Stop>
	return sum/NUM_SAMPLES;
 8001138:	6a3b      	ldr	r3, [r7, #32]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114a:	f000 ffa5 	bl	8002098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114e:	f000 f821 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001152:	f000 fa0f 	bl	8001574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001156:	f000 f9e3 	bl	8001520 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800115a:	f000 f923 	bl	80013a4 <MX_TIM3_Init>
  MX_ADC1_Init();
 800115e:	f000 f877 	bl	8001250 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001162:	f000 f8c7 	bl	80012f4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001166:	f000 f981 	bl	800146c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  uint32_t IR_R = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  uint32_t IR_L = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  uint32_t IR_FR = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  uint32_t IR_FL = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IR_R = Irs_Read_Right();
 800117a:	f7ff ff1c 	bl	8000fb6 <Irs_Read_Right>
 800117e:	60f8      	str	r0, [r7, #12]
	  IR_L = Irs_Read_Left();
 8001180:	f7ff ff31 	bl	8000fe6 <Irs_Read_Left>
 8001184:	60b8      	str	r0, [r7, #8]
	  IR_FR = Irs_Read_FrontR();
 8001186:	f7ff ff1e 	bl	8000fc6 <Irs_Read_FrontR>
 800118a:	6078      	str	r0, [r7, #4]
	  IR_FL = Irs_Read_FrontL();
 800118c:	f7ff ff23 	bl	8000fd6 <Irs_Read_FrontL>
 8001190:	6038      	str	r0, [r7, #0]
	  IR_R = Irs_Read_Right();
 8001192:	e7f2      	b.n	800117a <main+0x36>

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2230      	movs	r2, #48	; 0x30
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fa38 	bl	8004618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <SystemClock_Config+0xb4>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <SystemClock_Config+0xb4>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <SystemClock_Config+0xb4>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <SystemClock_Config+0xb8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <SystemClock_Config+0xb8>)
 80011de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <SystemClock_Config+0xb8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	2310      	movs	r3, #16
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4618      	mov	r0, r3
 8001206:	f001 fe73 	bl	8002ef0 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001210:	f000 faaa 	bl	8001768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f002 f8a0 	bl	8003374 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800123a:	f000 fa95 	bl	8001768 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3750      	adds	r7, #80	; 0x50
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001264:	4a21      	ldr	r2, [pc, #132]	; (80012ec <MX_ADC1_Init+0x9c>)
 8001266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_ADC1_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_ADC1_Init+0x98>)
 800127c:	2201      	movs	r2, #1
 800127e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_ADC1_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <MX_ADC1_Init+0xa0>)
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_ADC1_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <MX_ADC1_Init+0x98>)
 800129c:	2201      	movs	r2, #1
 800129e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_ADC1_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_ADC1_Init+0x98>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <MX_ADC1_Init+0x98>)
 80012b0:	f000 ff64 	bl	800217c <HAL_ADC_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012ba:	f000 fa55 	bl	8001768 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012be:	230b      	movs	r3, #11
 80012c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_ADC1_Init+0x98>)
 80012d0:	f001 f902 	bl	80024d8 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012da:	f000 fa45 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200000cc 	.word	0x200000cc
 80012ec:	40012000 	.word	0x40012000
 80012f0:	0f000001 	.word	0x0f000001

080012f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_TIM2_Init+0xac>)
 8001318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_TIM2_Init+0xac>)
 8001320:	2200      	movs	r2, #0
 8001322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_TIM2_Init+0xac>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_TIM2_Init+0xac>)
 800132c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_TIM2_Init+0xac>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM2_Init+0xac>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <MX_TIM2_Init+0xac>)
 8001340:	f002 fa06 	bl	8003750 <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800134a:	f000 fa0d 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4619      	mov	r1, r3
 800135c:	4810      	ldr	r0, [pc, #64]	; (80013a0 <MX_TIM2_Init+0xac>)
 800135e:	f002 fe86 	bl	800406e <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001368:	f000 f9fe 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2208      	movs	r2, #8
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM2_Init+0xac>)
 8001384:	f002 fb4a 	bl	8003a1c <HAL_TIM_PWM_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800138e:	f000 f9eb 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM2_Init+0xac>)
 8001394:	f000 fcbc 	bl	8001d10 <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	; 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000114 	.word	0x20000114

080013a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <MX_TIM3_Init+0xc4>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3199;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013da:	f640 427f 	movw	r2, #3199	; 0xc7f
 80013de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ec:	481d      	ldr	r0, [pc, #116]	; (8001464 <MX_TIM3_Init+0xc0>)
 80013ee:	f002 f9af 	bl	8003750 <HAL_TIM_PWM_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80013f8:	f000 f9b6 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4619      	mov	r1, r3
 800140a:	4816      	ldr	r0, [pc, #88]	; (8001464 <MX_TIM3_Init+0xc0>)
 800140c:	f002 fe2f 	bl	800406e <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001416:	f000 f9a7 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141a:	2360      	movs	r3, #96	; 0x60
 800141c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <MX_TIM3_Init+0xc0>)
 8001432:	f002 faf3 	bl	8003a1c <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800143c:	f000 f994 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2204      	movs	r2, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4807      	ldr	r0, [pc, #28]	; (8001464 <MX_TIM3_Init+0xc0>)
 8001448:	f002 fae8 	bl	8003a1c <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001452:	f000 f989 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001456:	4803      	ldr	r0, [pc, #12]	; (8001464 <MX_TIM3_Init+0xc0>)
 8001458:	f000 fc5a 	bl	8001d10 <HAL_TIM_MspPostInit>

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	2000008c 	.word	0x2000008c
 8001468:	40000400 	.word	0x40000400

0800146c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <MX_TIM4_Init+0xac>)
 8001490:	4a22      	ldr	r2, [pc, #136]	; (800151c <MX_TIM4_Init+0xb0>)
 8001492:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_TIM4_Init+0xac>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_TIM4_Init+0xac>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3199;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_TIM4_Init+0xac>)
 80014a2:	f640 427f 	movw	r2, #3199	; 0xc7f
 80014a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_TIM4_Init+0xac>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_TIM4_Init+0xac>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014b4:	4818      	ldr	r0, [pc, #96]	; (8001518 <MX_TIM4_Init+0xac>)
 80014b6:	f002 f94b 	bl	8003750 <HAL_TIM_PWM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80014c0:	f000 f952 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4619      	mov	r1, r3
 80014d2:	4811      	ldr	r0, [pc, #68]	; (8001518 <MX_TIM4_Init+0xac>)
 80014d4:	f002 fdcb 	bl	800406e <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80014de:	f000 f943 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	; 0x60
 80014e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <MX_TIM4_Init+0xac>)
 80014fa:	f002 fa8f 	bl	8003a1c <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001504:	f000 f930 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <MX_TIM4_Init+0xac>)
 800150a:	f000 fc01 	bl	8001d10 <HAL_TIM_MspPostInit>

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000004c 	.word	0x2000004c
 800151c:	40000800 	.word	0x40000800

08001520 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_USART2_UART_Init+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800152c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_USART2_UART_Init+0x4c>)
 8001558:	f002 fde2 	bl	8004120 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001562:	f000 f901 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000154 	.word	0x20000154
 8001570:	40004400 	.word	0x40004400

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <MX_GPIO_Init+0x190>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a5c      	ldr	r2, [pc, #368]	; (8001704 <MX_GPIO_Init+0x190>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <MX_GPIO_Init+0x190>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b56      	ldr	r3, [pc, #344]	; (8001704 <MX_GPIO_Init+0x190>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a55      	ldr	r2, [pc, #340]	; (8001704 <MX_GPIO_Init+0x190>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <MX_GPIO_Init+0x190>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <MX_GPIO_Init+0x190>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a4e      	ldr	r2, [pc, #312]	; (8001704 <MX_GPIO_Init+0x190>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <MX_GPIO_Init+0x190>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b48      	ldr	r3, [pc, #288]	; (8001704 <MX_GPIO_Init+0x190>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a47      	ldr	r2, [pc, #284]	; (8001704 <MX_GPIO_Init+0x190>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b45      	ldr	r3, [pc, #276]	; (8001704 <MX_GPIO_Init+0x190>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2120      	movs	r1, #32
 80015fe:	4842      	ldr	r0, [pc, #264]	; (8001708 <MX_GPIO_Init+0x194>)
 8001600:	f001 fc44 	bl	8002e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IrFrontLE_Pin|IrLeftE_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2181      	movs	r1, #129	; 0x81
 8001608:	4840      	ldr	r0, [pc, #256]	; (800170c <MX_GPIO_Init+0x198>)
 800160a:	f001 fc3f 	bl	8002e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IrRightE_Pin|IrFrontRE_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001614:	483e      	ldr	r0, [pc, #248]	; (8001710 <MX_GPIO_Init+0x19c>)
 8001616:	f001 fc39 	bl	8002e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PushButton_Pin EncoderLB_Pin */
  GPIO_InitStruct.Pin = PushButton_Pin|EncoderLB_Pin;
 800161a:	f242 0310 	movw	r3, #8208	; 0x2010
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001620:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <MX_GPIO_Init+0x1a0>)
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	4838      	ldr	r0, [pc, #224]	; (8001710 <MX_GPIO_Init+0x19c>)
 8001630:	f001 fa92 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : EncoderLF_Pin EncoderRB_Pin */
  GPIO_InitStruct.Pin = EncoderLF_Pin|EncoderRB_Pin;
 8001634:	f248 0302 	movw	r3, #32770	; 0x8002
 8001638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <MX_GPIO_Init+0x1a0>)
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	482f      	ldr	r0, [pc, #188]	; (8001708 <MX_GPIO_Init+0x194>)
 800164a:	f001 fa85 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800164e:	2320      	movs	r3, #32
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4828      	ldr	r0, [pc, #160]	; (8001708 <MX_GPIO_Init+0x194>)
 8001666:	f001 fa77 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : IrFrontLE_Pin IrLeftE_Pin */
  GPIO_InitStruct.Pin = IrFrontLE_Pin|IrLeftE_Pin;
 800166a:	2381      	movs	r3, #129	; 0x81
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4822      	ldr	r0, [pc, #136]	; (800170c <MX_GPIO_Init+0x198>)
 8001682:	f001 fa69 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : IrRightE_Pin IrFrontRE_Pin */
  GPIO_InitStruct.Pin = IrRightE_Pin|IrFrontRE_Pin;
 8001686:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	481c      	ldr	r0, [pc, #112]	; (8001710 <MX_GPIO_Init+0x19c>)
 80016a0:	f001 fa5a 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderRF_Pin */
  GPIO_InitStruct.Pin = EncoderRF_Pin;
 80016a4:	2308      	movs	r3, #8
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_GPIO_Init+0x1a0>)
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EncoderRF_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4815      	ldr	r0, [pc, #84]	; (800170c <MX_GPIO_Init+0x198>)
 80016b8:	f001 fa4e 	bl	8002b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2007      	movs	r0, #7
 80016c2:	f001 fa12 	bl	8002aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016c6:	2007      	movs	r0, #7
 80016c8:	f001 fa2b 	bl	8002b22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2009      	movs	r0, #9
 80016d2:	f001 fa0a 	bl	8002aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016d6:	2009      	movs	r0, #9
 80016d8:	f001 fa23 	bl	8002b22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	200a      	movs	r0, #10
 80016e2:	f001 fa02 	bl	8002aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80016e6:	200a      	movs	r0, #10
 80016e8:	f001 fa1b 	bl	8002b22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2028      	movs	r0, #40	; 0x28
 80016f2:	f001 f9fa 	bl	8002aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016f6:	2028      	movs	r0, #40	; 0x28
 80016f8:	f001 fa13 	bl	8002b22 <HAL_NVIC_EnableIRQ>

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	10310000 	.word	0x10310000

08001718 <Get_HTim2_Ptr>:

/* USER CODE BEGIN 4 */

TIM_HandleTypeDef* Get_HTim2_Ptr(void) {
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	return &htim2;
 800171c:	4b02      	ldr	r3, [pc, #8]	; (8001728 <Get_HTim2_Ptr+0x10>)
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	20000114 	.word	0x20000114

0800172c <Get_HTim3_Ptr>:

TIM_HandleTypeDef* Get_HTim3_Ptr(void) {
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	return &htim3;
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <Get_HTim3_Ptr+0x10>)
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	2000008c 	.word	0x2000008c

08001740 <Get_HTim4_Ptr>:

TIM_HandleTypeDef* Get_HTim4_Ptr(void) {
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return &htim4;
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <Get_HTim4_Ptr+0x10>)
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	2000004c 	.word	0x2000004c

08001754 <Get_HAdc1_Ptr>:

ADC_HandleTypeDef* Get_HAdc1_Ptr(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	return &hadc1;
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <Get_HAdc1_Ptr+0x10>)
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	200000cc 	.word	0x200000cc

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <MotorR_PWM_Set>:
	PWM_Set(MOTOR_LF, 0);
	PWM_Set(MOTOR_LB, 0);
}


void MotorR_PWM_Set(float pwm) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	ed87 0a01 	vstr	s0, [r7, #4]
	 * and pass abs(pwm) as the 2nd argument.
	 * Remember to not have forwards and backwards high at the same time, so when setting one direction,
	 * also set the other direction to 0.
	 */

	if (pwm > 0) {
 8001782:	edd7 7a01 	vldr	s15, [r7, #4]
 8001786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	dd0a      	ble.n	80017a6 <MotorR_PWM_Set+0x2e>
		PWM_Set(MOTOR_RF, pwm);
 8001790:	ed97 0a01 	vldr	s0, [r7, #4]
 8001794:	2000      	movs	r0, #0
 8001796:	f000 f847 	bl	8001828 <PWM_Set>
		PWM_Set(MOTOR_RB, 0);
 800179a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80017cc <MotorR_PWM_Set+0x54>
 800179e:	2001      	movs	r0, #1
 80017a0:	f000 f842 	bl	8001828 <PWM_Set>
	} else {
		PWM_Set(MOTOR_RF, 0);
		PWM_Set(MOTOR_RB, (-1*pwm)); // make pwm a positive value
	}

}
 80017a4:	e00d      	b.n	80017c2 <MotorR_PWM_Set+0x4a>
		PWM_Set(MOTOR_RF, 0);
 80017a6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80017cc <MotorR_PWM_Set+0x54>
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f83c 	bl	8001828 <PWM_Set>
		PWM_Set(MOTOR_RB, (-1*pwm)); // make pwm a positive value
 80017b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b4:	eef1 7a67 	vneg.f32	s15, s15
 80017b8:	eeb0 0a67 	vmov.f32	s0, s15
 80017bc:	2001      	movs	r0, #1
 80017be:	f000 f833 	bl	8001828 <PWM_Set>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	00000000 	.word	0x00000000

080017d0 <MotorL_PWM_Set>:


void MotorL_PWM_Set(float pwm) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	ed87 0a01 	vstr	s0, [r7, #4]
	 * and pass abs(pwm) as the 2nd argument.
	 * Remember to not have forwards and backwards high at the same time, so when setting one direction,
	 * also set the other direction to 0.
	 */

	if (pwm > 0) {
 80017da:	edd7 7a01 	vldr	s15, [r7, #4]
 80017de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	dd0a      	ble.n	80017fe <MotorL_PWM_Set+0x2e>
		PWM_Set(MOTOR_LF, pwm);
 80017e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80017ec:	2002      	movs	r0, #2
 80017ee:	f000 f81b 	bl	8001828 <PWM_Set>
		PWM_Set(MOTOR_LB, 0);
 80017f2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001824 <MotorL_PWM_Set+0x54>
 80017f6:	2003      	movs	r0, #3
 80017f8:	f000 f816 	bl	8001828 <PWM_Set>

	} else {
		PWM_Set(MOTOR_LF, 0);
		PWM_Set(MOTOR_LB, (-1*pwm));// make pwm a positive value
	}
}
 80017fc:	e00d      	b.n	800181a <MotorL_PWM_Set+0x4a>
		PWM_Set(MOTOR_LF, 0);
 80017fe:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001824 <MotorL_PWM_Set+0x54>
 8001802:	2002      	movs	r0, #2
 8001804:	f000 f810 	bl	8001828 <PWM_Set>
		PWM_Set(MOTOR_LB, (-1*pwm));// make pwm a positive value
 8001808:	edd7 7a01 	vldr	s15, [r7, #4]
 800180c:	eef1 7a67 	vneg.f32	s15, s15
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	2003      	movs	r0, #3
 8001816:	f000 f807 	bl	8001828 <PWM_Set>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	00000000 	.word	0x00000000

08001828 <PWM_Set>:
 * Sets the duty cycle for a motor.
 * The motor input can either be MOTOR_RF, MOTOR_RB, MOTOR_LF, or MOTOR_LB.
 * The pwm value is the fraction of the period where the output is high, so 0.5 corresponds to a 50% duty cycle.
 * */
void PWM_Set(Motor motor, float pwm)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	ed87 0a00 	vstr	s0, [r7]
 8001834:	71fb      	strb	r3, [r7, #7]

	TIM_HandleTypeDef *htim_ptr;
	uint32_t channel;

	switch(motor)
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d862      	bhi.n	8001902 <PWM_Set+0xda>
 800183c:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <PWM_Set+0x1c>)
 800183e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001842:	bf00      	nop
 8001844:	08001855 	.word	0x08001855
 8001848:	08001861 	.word	0x08001861
 800184c:	0800186d 	.word	0x0800186d
 8001850:	08001879 	.word	0x08001879
	{
		case MOTOR_RF:
			htim_ptr = Get_HTim3_Ptr();
 8001854:	f7ff ff6a 	bl	800172c <Get_HTim3_Ptr>
 8001858:	62f8      	str	r0, [r7, #44]	; 0x2c
			channel = TIM_CHANNEL_2;
 800185a:	2304      	movs	r3, #4
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800185e:	e011      	b.n	8001884 <PWM_Set+0x5c>
		case MOTOR_RB:
			htim_ptr = Get_HTim2_Ptr();
 8001860:	f7ff ff5a 	bl	8001718 <Get_HTim2_Ptr>
 8001864:	62f8      	str	r0, [r7, #44]	; 0x2c
			channel = TIM_CHANNEL_3;
 8001866:	2308      	movs	r3, #8
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800186a:	e00b      	b.n	8001884 <PWM_Set+0x5c>
		case MOTOR_LF:
			htim_ptr = Get_HTim4_Ptr();
 800186c:	f7ff ff68 	bl	8001740 <Get_HTim4_Ptr>
 8001870:	62f8      	str	r0, [r7, #44]	; 0x2c
			channel = TIM_CHANNEL_1;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001876:	e005      	b.n	8001884 <PWM_Set+0x5c>
		case MOTOR_LB:
			htim_ptr = Get_HTim3_Ptr();
 8001878:	f7ff ff58 	bl	800172c <Get_HTim3_Ptr>
 800187c:	62f8      	str	r0, [r7, #44]	; 0x2c
			channel = TIM_CHANNEL_1;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001882:	bf00      	nop
		default:
			return;
	}

	if(pwm > PWM_MAX)
 8001884:	6838      	ldr	r0, [r7, #0]
 8001886:	f7fe fe0b 	bl	80004a0 <__aeabi_f2d>
 800188a:	a323      	add	r3, pc, #140	; (adr r3, 8001918 <PWM_Set+0xf0>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7ff f8ee 	bl	8000a70 <__aeabi_dcmpgt>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <PWM_Set+0x78>
		pwm = PWM_MAX;
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <PWM_Set+0xe8>)
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	e009      	b.n	80018b4 <PWM_Set+0x8c>
	else if (pwm < 0)
 80018a0:	edd7 7a00 	vldr	s15, [r7]
 80018a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	d502      	bpl.n	80018b4 <PWM_Set+0x8c>
		pwm = 0;
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	603b      	str	r3, [r7, #0]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]
 80018c6:	619a      	str	r2, [r3, #24]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c8:	2360      	movs	r3, #96	; 0x60
 80018ca:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = pwm * MAX_TIM_COUNTS;
 80018cc:	edd7 7a00 	vldr	s15, [r7]
 80018d0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001914 <PWM_Set+0xec>
 80018d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018dc:	ee17 3a90 	vmov	r3, s15
 80018e0:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]

    HAL_TIM_PWM_ConfigChannel(htim_ptr, &sConfigOC, channel);
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018f0:	4619      	mov	r1, r3
 80018f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018f4:	f002 f892 	bl	8003a1c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(htim_ptr, channel);
 80018f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018fc:	f001 ff54 	bl	80037a8 <HAL_TIM_PWM_Start>
 8001900:	e000      	b.n	8001904 <PWM_Set+0xdc>
			return;
 8001902:	bf00      	nop
}
 8001904:	3730      	adds	r7, #48	; 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	f3af 8000 	nop.w
 8001910:	3f4ccccd 	.word	0x3f4ccccd
 8001914:	45480000 	.word	0x45480000
 8001918:	9999999a 	.word	0x9999999a
 800191c:	3fe99999 	.word	0x3fe99999

08001920 <PID_Update>:
	counter = 0;

}

/*Should be called every millisecond to update your motor PWM duty cycles*/
void PID_Update(void) {
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
	 * have been in a sufficiently close state. This will be helpful for the PID_Done function.
	 * Perhaps you will only return that the PID is done if you have been sufficiently close for 50 straight
	 * calls of this function... or something like that.*/

	// Get sensor feedback
	int32_t right = GetEncoderRCounts();
 8001926:	f7ff fb1d 	bl	8000f64 <GetEncoderRCounts>
 800192a:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t left  = GetEncoderLCounts();
 800192c:	f7ff fb26 	bl	8000f7c <GetEncoderLCounts>
 8001930:	6238      	str	r0, [r7, #32]
	int32_t distanceTravelled = (right + left)/2;
 8001932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	4413      	add	r3, r2
 8001938:	0fda      	lsrs	r2, r3, #31
 800193a:	4413      	add	r3, r2
 800193c:	105b      	asrs	r3, r3, #1
 800193e:	61fb      	str	r3, [r7, #28]
	int32_t angleTravelled = left - right;
 8001940:	6a3a      	ldr	r2, [r7, #32]
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	61bb      	str	r3, [r7, #24]

	// x_controller
	float xError = goalD - distanceTravelled; // or the other way around
 8001948:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <PID_Update+0x1a0>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001958:	edc7 7a05 	vstr	s15, [r7, #20]
	float pwmX = (kP_X * xError) + (kD_X * (xError - xErrorOld)) / 0.01;
 800195c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001ac4 <PID_Update+0x1a4>
 8001960:	edd7 7a05 	vldr	s15, [r7, #20]
 8001964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001968:	ee17 0a90 	vmov	r0, s15
 800196c:	f7fe fd98 	bl	80004a0 <__aeabi_f2d>
 8001970:	4604      	mov	r4, r0
 8001972:	460d      	mov	r5, r1
 8001974:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <PID_Update+0x1a8>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ed97 7a05 	vldr	s14, [r7, #20]
 800197e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001982:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001acc <PID_Update+0x1ac>
 8001986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198a:	ee17 0a90 	vmov	r0, s15
 800198e:	f7fe fd87 	bl	80004a0 <__aeabi_f2d>
 8001992:	a349      	add	r3, pc, #292	; (adr r3, 8001ab8 <PID_Update+0x198>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe ff04 	bl	80007a4 <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe fc1e 	bl	80001e4 <__adddf3>
 80019a8:	4603      	mov	r3, r0
 80019aa:	460c      	mov	r4, r1
 80019ac:	4618      	mov	r0, r3
 80019ae:	4621      	mov	r1, r4
 80019b0:	f7ff f868 	bl	8000a84 <__aeabi_d2f>
 80019b4:	4603      	mov	r3, r0
 80019b6:	613b      	str	r3, [r7, #16]
	xErrorOld = xError;
 80019b8:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <PID_Update+0x1a8>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	6013      	str	r3, [r2, #0]

	// w_controller
	float wError = angleTravelled - goalA;
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <PID_Update+0x1b0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ce:	edc7 7a03 	vstr	s15, [r7, #12]
	float pwmW = (kP_W * wError) + (kD_W * (wError - wErrorOld)) / 0.01; // why divide by 0.01?
 80019d2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001ad4 <PID_Update+0x1b4>
 80019d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019de:	ee17 0a90 	vmov	r0, s15
 80019e2:	f7fe fd5d 	bl	80004a0 <__aeabi_f2d>
 80019e6:	4604      	mov	r4, r0
 80019e8:	460d      	mov	r5, r1
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <PID_Update+0x1b8>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001adc <PID_Update+0x1bc>
 80019fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a00:	ee17 0a90 	vmov	r0, s15
 8001a04:	f7fe fd4c 	bl	80004a0 <__aeabi_f2d>
 8001a08:	a32b      	add	r3, pc, #172	; (adr r3, 8001ab8 <PID_Update+0x198>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fec9 	bl	80007a4 <__aeabi_ddiv>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4620      	mov	r0, r4
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f7fe fbe3 	bl	80001e4 <__adddf3>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	4618      	mov	r0, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	f7ff f82d 	bl	8000a84 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	60bb      	str	r3, [r7, #8]
	wErrorOld = wError;
 8001a2e:	4a2a      	ldr	r2, [pc, #168]	; (8001ad8 <PID_Update+0x1b8>)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6013      	str	r3, [r2, #0]

	// Limit motor PWM
	pwmX = limitPwm(pwmX);
 8001a34:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a38:	f000 f856 	bl	8001ae8 <limitPwm>
 8001a3c:	ed87 0a04 	vstr	s0, [r7, #16]
	pwmW = limitPwm(pwmW);
 8001a40:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a44:	f000 f850 	bl	8001ae8 <limitPwm>
 8001a48:	ed87 0a02 	vstr	s0, [r7, #8]

	// Calculate right and left PWM value
	float rightSpeed = pwmX + pwmW;
 8001a4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	edc7 7a01 	vstr	s15, [r7, #4]
	float leftSpeed = pwmX - pwmW;
 8001a5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a68:	edc7 7a00 	vstr	s15, [r7]

	// Increase counter only if rat isn't moving considerably
	if (rightSpeed < minSpeed && leftSpeed < minSpeed) {
 8001a6c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001ae0 <PID_Update+0x1c0>
 8001a70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	d50d      	bpl.n	8001a9a <PID_Update+0x17a>
 8001a7e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001ae0 <PID_Update+0x1c0>
 8001a82:	edd7 7a00 	vldr	s15, [r7]
 8001a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d504      	bpl.n	8001a9a <PID_Update+0x17a>
		counter++;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <PID_Update+0x1c4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <PID_Update+0x1c4>)
 8001a98:	6013      	str	r3, [r2, #0]
	}

	// Move motors
	MotorR_PWM_Set(rightSpeed);
 8001a9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a9e:	f7ff fe6b 	bl	8001778 <MotorR_PWM_Set>
	MotorL_PWM_Set(leftSpeed);
 8001aa2:	ed97 0a00 	vldr	s0, [r7]
 8001aa6:	f7ff fe93 	bl	80017d0 <MotorL_PWM_Set>

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	47ae147b 	.word	0x47ae147b
 8001abc:	3f847ae1 	.word	0x3f847ae1
 8001ac0:	20000028 	.word	0x20000028
 8001ac4:	3ca3d70a 	.word	0x3ca3d70a
 8001ac8:	20000030 	.word	0x20000030
 8001acc:	3ba3d70a 	.word	0x3ba3d70a
 8001ad0:	2000002c 	.word	0x2000002c
 8001ad4:	3d23d70a 	.word	0x3d23d70a
 8001ad8:	20000034 	.word	0x20000034
 8001adc:	3c23d70a 	.word	0x3c23d70a
 8001ae0:	3e4ccccd 	.word	0x3e4ccccd
 8001ae4:	20000038 	.word	0x20000038

08001ae8 <limitPwm>:
	}

}

/* Limits PWM between -1 to 1 */
float limitPwm(float pwm) {
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	ed87 0a01 	vstr	s0, [r7, #4]

	if(pwm > maxSpeed) {
 8001af2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001af6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	dd02      	ble.n	8001b0a <limitPwm+0x22>
		return maxSpeed;
 8001b04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001b08:	e011      	b.n	8001b2e <limitPwm+0x46>

	} else if(pwm < -maxSpeed) {
 8001b0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001b0e:	eef1 7a67 	vneg.f32	s15, s15
 8001b12:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	d504      	bpl.n	8001b2a <limitPwm+0x42>
		return -maxSpeed;
 8001b20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001b24:	eef1 7a67 	vneg.f32	s15, s15
 8001b28:	e001      	b.n	8001b2e <limitPwm+0x46>

	} else {
		return pwm;
 8001b2a:	edd7 7a01 	vldr	s15, [r7, #4]
	}

}
 8001b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_MspInit+0x4c>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800

08001b8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_ADC_MspInit+0xb0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d141      	bne.n	8001c32 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_ADC_MspInit+0xb4>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <HAL_ADC_MspInit+0xb4>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_ADC_MspInit+0xb4>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_ADC_MspInit+0xb4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <HAL_ADC_MspInit+0xb4>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_ADC_MspInit+0xb4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_ADC_MspInit+0xb4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <HAL_ADC_MspInit+0xb4>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_ADC_MspInit+0xb4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = IrLeftR_Pin|IrFrontLR_Pin;
 8001c02:	2303      	movs	r3, #3
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c06:	2303      	movs	r3, #3
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <HAL_ADC_MspInit+0xb8>)
 8001c16:	f000 ff9f 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IrRightR_Pin|IrFrontRR_Pin;
 8001c1a:	2311      	movs	r3, #17
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4806      	ldr	r0, [pc, #24]	; (8001c48 <HAL_ADC_MspInit+0xbc>)
 8001c2e:	f000 ff93 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	; 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40012000 	.word	0x40012000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020000 	.word	0x40020000

08001c4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5c:	d116      	bne.n	8001c8c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_TIM_PWM_MspInit+0xb8>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_TIM_PWM_MspInit+0xb8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_TIM_PWM_MspInit+0xb8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	201c      	movs	r0, #28
 8001c80:	f000 ff33 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c84:	201c      	movs	r0, #28
 8001c86:	f000 ff4c 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c8a:	e036      	b.n	8001cfa <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_TIM_PWM_MspInit+0xbc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d116      	bne.n	8001cc4 <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_TIM_PWM_MspInit+0xb8>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_TIM_PWM_MspInit+0xb8>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_TIM_PWM_MspInit+0xb8>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	201d      	movs	r0, #29
 8001cb8:	f000 ff17 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cbc:	201d      	movs	r0, #29
 8001cbe:	f000 ff30 	bl	8002b22 <HAL_NVIC_EnableIRQ>
}
 8001cc2:	e01a      	b.n	8001cfa <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <HAL_TIM_PWM_MspInit+0xc0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d115      	bne.n	8001cfa <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_TIM_PWM_MspInit+0xb8>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_TIM_PWM_MspInit+0xb8>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_TIM_PWM_MspInit+0xb8>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	201e      	movs	r0, #30
 8001cf0:	f000 fefb 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cf4:	201e      	movs	r0, #30
 8001cf6:	f000 ff14 	bl	8002b22 <HAL_NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40000800 	.word	0x40000800

08001d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d30:	d11f      	bne.n	8001d72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a42      	ldr	r2, [pc, #264]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = MotorRB_Pin;
 8001d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorRB_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4837      	ldr	r0, [pc, #220]	; (8001e48 <HAL_TIM_MspPostInit+0x138>)
 8001d6c:	f000 fef4 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d70:	e064      	b.n	8001e3c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a35      	ldr	r2, [pc, #212]	; (8001e4c <HAL_TIM_MspPostInit+0x13c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d13c      	bne.n	8001df6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4a28      	ldr	r2, [pc, #160]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6313      	str	r3, [r2, #48]	; 0x30
 8001da8:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MotorLB_Pin;
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorLB_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4820      	ldr	r0, [pc, #128]	; (8001e50 <HAL_TIM_MspPostInit+0x140>)
 8001dd0:	f000 fec2 	bl	8002b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MotorRF_Pin;
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001de4:	2302      	movs	r3, #2
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorRF_GPIO_Port, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4819      	ldr	r0, [pc, #100]	; (8001e54 <HAL_TIM_MspPostInit+0x144>)
 8001df0:	f000 feb2 	bl	8002b58 <HAL_GPIO_Init>
}
 8001df4:	e022      	b.n	8001e3c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_TIM_MspPostInit+0x148>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d11d      	bne.n	8001e3c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_TIM_MspPostInit+0x134>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MotorLF_Pin;
 8001e1c:	2340      	movs	r3, #64	; 0x40
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorLF_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4804      	ldr	r0, [pc, #16]	; (8001e48 <HAL_TIM_MspPostInit+0x138>)
 8001e38:	f000 fe8e 	bl	8002b58 <HAL_GPIO_Init>
}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	; 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40000800 	.word	0x40000800

08001e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_UART_MspInit+0x84>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d12b      	bne.n	8001ed6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_UART_MspInit+0x8c>)
 8001ed2:	f000 fe41 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40004400 	.word	0x40004400
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	SysTick_Function();
 8001f40:	f000 f87a 	bl	8002038 <SysTick_Function>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f44:	f000 f8fa 	bl	800213c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f50:	2002      	movs	r0, #2
 8001f52:	f000 ffb5 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f5e:	2008      	movs	r0, #8
 8001f60:	f000 ffae 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f6c:	2010      	movs	r0, #16
 8001f6e:	f000 ffa7 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <TIM2_IRQHandler+0x10>)
 8001f7e:	f001 fc45 	bl	800380c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000114 	.word	0x20000114

08001f8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM3_IRQHandler+0x10>)
 8001f92:	f001 fc3b 	bl	800380c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000008c 	.word	0x2000008c

08001fa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <TIM4_IRQHandler+0x10>)
 8001fa6:	f001 fc31 	bl	800380c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000004c 	.word	0x2000004c

08001fb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fbc:	f000 ff80 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001fc0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fc4:	f000 ff7c 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <SystemInit+0x60>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	4a15      	ldr	r2, [pc, #84]	; (800202c <SystemInit+0x60>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <SystemInit+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <SystemInit+0x64>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <SystemInit+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <SystemInit+0x64>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <SystemInit+0x64>)
 8001ff8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <SystemInit+0x64>)
 8002004:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <SystemInit+0x68>)
 8002006:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <SystemInit+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a08      	ldr	r2, [pc, #32]	; (8002030 <SystemInit+0x64>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <SystemInit+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <SystemInit+0x60>)
 800201c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002020:	609a      	str	r2, [r3, #8]
#endif
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00
 8002030:	40023800 	.word	0x40023800
 8002034:	24003010 	.word	0x24003010

08002038 <SysTick_Function>:

#include "main.h"
#include "pid.h"

/* Will be called every millisecond */
void SysTick_Function(void) {
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0

	/* Do whatever you wish to be done every millisecond. Maybe... update your PID? */
	PID_Update();
 800203c:	f7ff fc70 	bl	8001920 <PID_Update>

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800207c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002048:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800204a:	e003      	b.n	8002054 <LoopCopyDataInit>

0800204c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800204e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002050:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002052:	3104      	adds	r1, #4

08002054 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002054:	480b      	ldr	r0, [pc, #44]	; (8002084 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002058:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800205a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800205c:	d3f6      	bcc.n	800204c <CopyDataInit>
  ldr  r2, =_sbss
 800205e:	4a0b      	ldr	r2, [pc, #44]	; (800208c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002060:	e002      	b.n	8002068 <LoopFillZerobss>

08002062 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002062:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002064:	f842 3b04 	str.w	r3, [r2], #4

08002068 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800206a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800206c:	d3f9      	bcc.n	8002062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800206e:	f7ff ffad 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002072:	f002 faad 	bl	80045d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002076:	f7ff f865 	bl	8001144 <main>
  bx  lr    
 800207a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800207c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002080:	08004668 	.word	0x08004668
  ldr  r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002088:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800208c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002090:	20000198 	.word	0x20000198

08002094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002094:	e7fe      	b.n	8002094 <ADC_IRQHandler>
	...

08002098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <HAL_Init+0x40>)
 80020a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_Init+0x40>)
 80020ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_Init+0x40>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 fd07 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 f808 	bl	80020dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020cc:	f7ff fd36 	bl	8001b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00

080020dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_InitTick+0x54>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x58>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fd1f 	bl	8002b3e <HAL_SYSTICK_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00e      	b.n	8002128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d80a      	bhi.n	8002126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002110:	2200      	movs	r2, #0
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002118:	f000 fce7 	bl	8002aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <HAL_InitTick+0x5c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e000      	b.n	8002128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000000 	.word	0x20000000
 8002134:	20000008 	.word	0x20000008
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_IncTick+0x20>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x24>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_IncTick+0x24>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000008 	.word	0x20000008
 8002160:	20000194 	.word	0x20000194

08002164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_GetTick+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000194 	.word	0x20000194

0800217c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e033      	b.n	80021fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fcf6 	bl	8001b8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d118      	bne.n	80021ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c2:	f023 0302 	bic.w	r3, r3, #2
 80021c6:	f043 0202 	orr.w	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fab4 	bl	800273c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ea:	e001      	b.n	80021f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_ADC_Start+0x1a>
 800221a:	2302      	movs	r3, #2
 800221c:	e08a      	b.n	8002334 <HAL_ADC_Start+0x130>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d018      	beq.n	8002266 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002244:	4b3e      	ldr	r3, [pc, #248]	; (8002340 <HAL_ADC_Start+0x13c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a3e      	ldr	r2, [pc, #248]	; (8002344 <HAL_ADC_Start+0x140>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9a      	lsrs	r2, r3, #18
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002258:	e002      	b.n	8002260 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3b01      	subs	r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f9      	bne.n	800225a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d15e      	bne.n	8002332 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800229e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b2:	d106      	bne.n	80022c2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	f023 0206 	bic.w	r2, r3, #6
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	645a      	str	r2, [r3, #68]	; 0x44
 80022c0:	e002      	b.n	80022c8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_ADC_Start+0x144>)
 80022d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d11c      	bne.n	8002332 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	e013      	b.n	8002332 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a0f      	ldr	r2, [pc, #60]	; (800234c <HAL_ADC_Start+0x148>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d10e      	bne.n	8002332 <HAL_ADC_Start+0x12e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002330:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	20000000 	.word	0x20000000
 8002344:	431bde83 	.word	0x431bde83
 8002348:	40012300 	.word	0x40012300
 800234c:	40012000 	.word	0x40012000

08002350 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_ADC_Stop+0x16>
 8002362:	2302      	movs	r3, #2
 8002364:	e021      	b.n	80023aa <HAL_ADC_Stop+0x5a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d2:	d113      	bne.n	80023fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e2:	d10b      	bne.n	80023fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f043 0220 	orr.w	r2, r3, #32
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e05c      	b.n	80024b6 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80023fc:	f7ff feb2 	bl	8002164 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002402:	e01a      	b.n	800243a <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800240a:	d016      	beq.n	800243a <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_ADC_PollForConversion+0x6c>
 8002412:	f7ff fea7 	bl	8002164 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d20b      	bcs.n	800243a <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0204 	orr.w	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e03d      	b.n	80024b6 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b02      	cmp	r3, #2
 8002446:	d1dd      	bne.n	8002404 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0212 	mvn.w	r2, #18
 8002450:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d123      	bne.n	80024b4 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11f      	bne.n	80024b4 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800248c:	2b00      	cmp	r3, #0
 800248e:	d111      	bne.n	80024b4 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e113      	b.n	800271c <HAL_ADC_ConfigChannel+0x244>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b09      	cmp	r3, #9
 8002502:	d925      	bls.n	8002550 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68d9      	ldr	r1, [r3, #12]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	3b1e      	subs	r3, #30
 800251a:	2207      	movs	r2, #7
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43da      	mvns	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	400a      	ands	r2, r1
 8002528:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68d9      	ldr	r1, [r3, #12]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	4603      	mov	r3, r0
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4403      	add	r3, r0
 8002542:	3b1e      	subs	r3, #30
 8002544:	409a      	lsls	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	e022      	b.n	8002596 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6919      	ldr	r1, [r3, #16]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	2207      	movs	r2, #7
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	400a      	ands	r2, r1
 8002572:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	4603      	mov	r3, r0
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4403      	add	r3, r0
 800258c:	409a      	lsls	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b06      	cmp	r3, #6
 800259c:	d824      	bhi.n	80025e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	3b05      	subs	r3, #5
 80025b0:	221f      	movs	r2, #31
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	400a      	ands	r2, r1
 80025be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4618      	mov	r0, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b05      	subs	r3, #5
 80025da:	fa00 f203 	lsl.w	r2, r0, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
 80025e6:	e04c      	b.n	8002682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d824      	bhi.n	800263a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b23      	subs	r3, #35	; 0x23
 8002602:	221f      	movs	r2, #31
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43da      	mvns	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	400a      	ands	r2, r1
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4618      	mov	r0, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	3b23      	subs	r3, #35	; 0x23
 800262c:	fa00 f203 	lsl.w	r2, r0, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
 8002638:	e023      	b.n	8002682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b41      	subs	r3, #65	; 0x41
 800264c:	221f      	movs	r2, #31
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	400a      	ands	r2, r1
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	3b41      	subs	r3, #65	; 0x41
 8002676:	fa00 f203 	lsl.w	r2, r0, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_ADC_ConfigChannel+0x250>)
 8002684:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a28      	ldr	r2, [pc, #160]	; (800272c <HAL_ADC_ConfigChannel+0x254>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d10f      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1d8>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b12      	cmp	r3, #18
 8002696:	d10b      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1d      	ldr	r2, [pc, #116]	; (800272c <HAL_ADC_ConfigChannel+0x254>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d12b      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x23a>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_ADC_ConfigChannel+0x258>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d003      	beq.n	80026cc <HAL_ADC_ConfigChannel+0x1f4>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b11      	cmp	r3, #17
 80026ca:	d122      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a11      	ldr	r2, [pc, #68]	; (8002730 <HAL_ADC_ConfigChannel+0x258>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d111      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_ADC_ConfigChannel+0x25c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a11      	ldr	r2, [pc, #68]	; (8002738 <HAL_ADC_ConfigChannel+0x260>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	0c9a      	lsrs	r2, r3, #18
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002704:	e002      	b.n	800270c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3b01      	subs	r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f9      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40012300 	.word	0x40012300
 800272c:	40012000 	.word	0x40012000
 8002730:	10000012 	.word	0x10000012
 8002734:	20000000 	.word	0x20000000
 8002738:	431bde83 	.word	0x431bde83

0800273c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002744:	4b79      	ldr	r3, [pc, #484]	; (800292c <ADC_Init+0x1f0>)
 8002746:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	431a      	orrs	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	021a      	lsls	r2, r3, #8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6899      	ldr	r1, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	4a58      	ldr	r2, [pc, #352]	; (8002930 <ADC_Init+0x1f4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6899      	ldr	r1, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	e00f      	b.n	800283a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002838:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0202 	bic.w	r2, r2, #2
 8002848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e1b      	ldrb	r3, [r3, #24]
 8002854:	005a      	lsls	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002876:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002886:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	3b01      	subs	r3, #1
 8002894:	035a      	lsls	r2, r3, #13
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e007      	b.n	80028b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	051a      	lsls	r2, r3, #20
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028f2:	025a      	lsls	r2, r3, #9
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	029a      	lsls	r2, r3, #10
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40012300 	.word	0x40012300
 8002930:	0f000001 	.word	0x0f000001

08002934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800295c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <__NVIC_GetPriorityGrouping+0x18>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 0307 	and.w	r3, r3, #7
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db0b      	blt.n	80029c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4907      	ldr	r1, [pc, #28]	; (80029d0 <__NVIC_EnableIRQ+0x38>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0a      	blt.n	80029fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	490c      	ldr	r1, [pc, #48]	; (8002a20 <__NVIC_SetPriority+0x4c>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	440b      	add	r3, r1
 80029f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029fc:	e00a      	b.n	8002a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4908      	ldr	r1, [pc, #32]	; (8002a24 <__NVIC_SetPriority+0x50>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	440b      	add	r3, r1
 8002a12:	761a      	strb	r2, [r3, #24]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000e100 	.word	0xe000e100
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	bf28      	it	cs
 8002a46:	2304      	movcs	r3, #4
 8002a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d902      	bls.n	8002a58 <NVIC_EncodePriority+0x30>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3b03      	subs	r3, #3
 8002a56:	e000      	b.n	8002a5a <NVIC_EncodePriority+0x32>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43d9      	mvns	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	4313      	orrs	r3, r2
         );
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab4:	f7ff ff8e 	bl	80029d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff29 	bl	8002934 <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff3e 	bl	800297c <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff8e 	bl	8002a28 <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5d 	bl	80029d4 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff31 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffa2 	bl	8002a90 <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e159      	b.n	8002e28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b74:	2201      	movs	r2, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	f040 8148 	bne.w	8002e22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x4a>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b12      	cmp	r3, #18
 8002ba0:	d123      	bne.n	8002bea <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	69b9      	ldr	r1, [r7, #24]
 8002be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0203 	and.w	r2, r3, #3
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d00b      	beq.n	8002c3e <HAL_GPIO_Init+0xe6>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c32:	2b11      	cmp	r3, #17
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b12      	cmp	r3, #18
 8002c3c:	d130      	bne.n	8002ca0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	2203      	movs	r2, #3
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c74:	2201      	movs	r2, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0201 	and.w	r2, r3, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a2 	beq.w	8002e22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b56      	ldr	r3, [pc, #344]	; (8002e3c <HAL_GPIO_Init+0x2e4>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a55      	ldr	r2, [pc, #340]	; (8002e3c <HAL_GPIO_Init+0x2e4>)
 8002ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b53      	ldr	r3, [pc, #332]	; (8002e3c <HAL_GPIO_Init+0x2e4>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cfa:	4a51      	ldr	r2, [pc, #324]	; (8002e40 <HAL_GPIO_Init+0x2e8>)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	3302      	adds	r3, #2
 8002d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	220f      	movs	r2, #15
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a48      	ldr	r2, [pc, #288]	; (8002e44 <HAL_GPIO_Init+0x2ec>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d019      	beq.n	8002d5a <HAL_GPIO_Init+0x202>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a47      	ldr	r2, [pc, #284]	; (8002e48 <HAL_GPIO_Init+0x2f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0x1fe>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a46      	ldr	r2, [pc, #280]	; (8002e4c <HAL_GPIO_Init+0x2f4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_GPIO_Init+0x1fa>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a45      	ldr	r2, [pc, #276]	; (8002e50 <HAL_GPIO_Init+0x2f8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x1f6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a44      	ldr	r2, [pc, #272]	; (8002e54 <HAL_GPIO_Init+0x2fc>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_GPIO_Init+0x1f2>
 8002d46:	2304      	movs	r3, #4
 8002d48:	e008      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d4a:	2307      	movs	r3, #7
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e004      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e002      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	f002 0203 	and.w	r2, r2, #3
 8002d62:	0092      	lsls	r2, r2, #2
 8002d64:	4093      	lsls	r3, r2
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d6c:	4934      	ldr	r1, [pc, #208]	; (8002e40 <HAL_GPIO_Init+0x2e8>)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	089b      	lsrs	r3, r3, #2
 8002d72:	3302      	adds	r3, #2
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d7a:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d9e:	4a2e      	ldr	r2, [pc, #184]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002da4:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dc8:	4a23      	ldr	r2, [pc, #140]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df2:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df8:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e1c:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b0f      	cmp	r3, #15
 8002e2c:	f67f aea2 	bls.w	8002b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e30:	bf00      	nop
 8002e32:	3724      	adds	r7, #36	; 0x24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40013800 	.word	0x40013800
 8002e44:	40020000 	.word	0x40020000
 8002e48:	40020400 	.word	0x40020400
 8002e4c:	40020800 	.word	0x40020800
 8002e50:	40020c00 	.word	0x40020c00
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40013c00 	.word	0x40013c00

08002e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	887b      	ldrh	r3, [r7, #2]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	e001      	b.n	8002e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	807b      	strh	r3, [r7, #2]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e9c:	787b      	ldrb	r3, [r7, #1]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea8:	e003      	b.n	8002eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	041a      	lsls	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	619a      	str	r2, [r3, #24]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd ffa0 	bl	8000e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e22d      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d075      	beq.n	8002ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0e:	4ba3      	ldr	r3, [pc, #652]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1a:	4ba0      	ldr	r3, [pc, #640]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d112      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b9d      	ldr	r3, [pc, #628]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	4b99      	ldr	r3, [pc, #612]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05b      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x108>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d157      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e208      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d106      	bne.n	8002f64 <HAL_RCC_OscConfig+0x74>
 8002f56:	4b91      	ldr	r3, [pc, #580]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a90      	ldr	r2, [pc, #576]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e01d      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b8b      	ldr	r3, [pc, #556]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a8a      	ldr	r2, [pc, #552]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b88      	ldr	r3, [pc, #544]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a87      	ldr	r2, [pc, #540]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xb0>
 8002f88:	4b84      	ldr	r3, [pc, #528]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a83      	ldr	r2, [pc, #524]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b81      	ldr	r3, [pc, #516]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a80      	ldr	r2, [pc, #512]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7ff f8dc 	bl	8002164 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7ff f8d8 	bl	8002164 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1cd      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b76      	ldr	r3, [pc, #472]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xc0>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7ff f8c8 	bl	8002164 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7ff f8c4 	bl	8002164 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1b9      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	4b6c      	ldr	r3, [pc, #432]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xe8>
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d063      	beq.n	80030ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003006:	4b65      	ldr	r3, [pc, #404]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b62      	ldr	r3, [pc, #392]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301a:	2b08      	cmp	r3, #8
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d116      	bne.n	8003058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	4b5c      	ldr	r3, [pc, #368]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e18d      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003042:	4b56      	ldr	r3, [pc, #344]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4952      	ldr	r1, [pc, #328]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	e03a      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003060:	4b4f      	ldr	r3, [pc, #316]	; (80031a0 <HAL_RCC_OscConfig+0x2b0>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7ff f87d 	bl	8002164 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306e:	f7ff f879 	bl	8002164 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e16e      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	4b46      	ldr	r3, [pc, #280]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308c:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4940      	ldr	r1, [pc, #256]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e015      	b.n	80030ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_RCC_OscConfig+0x2b0>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7ff f85c 	bl	8002164 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b0:	f7ff f858 	bl	8002164 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e14d      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d030      	beq.n	800313c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e2:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <HAL_RCC_OscConfig+0x2b4>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7ff f83c 	bl	8002164 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f0:	f7ff f838 	bl	8002164 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e12d      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x200>
 800310e:	e015      	b.n	800313c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003110:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCC_OscConfig+0x2b4>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7ff f825 	bl	8002164 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311e:	f7ff f821 	bl	8002164 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e116      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a0 	beq.w	800328a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	4b0f      	ldr	r3, [pc, #60]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4a0e      	ldr	r2, [pc, #56]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	; 0x40
 800316a:	4b0c      	ldr	r3, [pc, #48]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x2b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d121      	bne.n	80031ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_RCC_OscConfig+0x2b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <HAL_RCC_OscConfig+0x2b8>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe ffe7 	bl	8002164 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e011      	b.n	80031be <HAL_RCC_OscConfig+0x2ce>
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	42470000 	.word	0x42470000
 80031a4:	42470e80 	.word	0x42470e80
 80031a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ac:	f7fe ffda 	bl	8002164 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e0cf      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <HAL_RCC_OscConfig+0x478>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d106      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
 80031d2:	4b66      	ldr	r3, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	4a65      	ldr	r2, [pc, #404]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6713      	str	r3, [r2, #112]	; 0x70
 80031de:	e01c      	b.n	800321a <HAL_RCC_OscConfig+0x32a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d10c      	bne.n	8003202 <HAL_RCC_OscConfig+0x312>
 80031e8:	4b60      	ldr	r3, [pc, #384]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a5f      	ldr	r2, [pc, #380]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 80031ee:	f043 0304 	orr.w	r3, r3, #4
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
 80031f4:	4b5d      	ldr	r3, [pc, #372]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	4a5c      	ldr	r2, [pc, #368]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003200:	e00b      	b.n	800321a <HAL_RCC_OscConfig+0x32a>
 8003202:	4b5a      	ldr	r3, [pc, #360]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a59      	ldr	r2, [pc, #356]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
 800320e:	4b57      	ldr	r3, [pc, #348]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	4a56      	ldr	r2, [pc, #344]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d015      	beq.n	800324e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe ff9f 	bl	8002164 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe ff9b 	bl	8002164 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e08e      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCC_OscConfig+0x33a>
 800324c:	e014      	b.n	8003278 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fe ff89 	bl	8002164 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fe ff85 	bl	8002164 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	; 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e078      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ee      	bne.n	8003256 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d105      	bne.n	800328a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a3a      	ldr	r2, [pc, #232]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 8003284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d064      	beq.n	800335c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b08      	cmp	r3, #8
 800329c:	d05c      	beq.n	8003358 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d141      	bne.n	800332a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b32      	ldr	r3, [pc, #200]	; (8003370 <HAL_RCC_OscConfig+0x480>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe ff5a 	bl	8002164 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe ff56 	bl	8002164 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e04b      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	4b29      	ldr	r3, [pc, #164]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	019b      	lsls	r3, r3, #6
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	3b01      	subs	r3, #1
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	061b      	lsls	r3, r3, #24
 80032f6:	491d      	ldr	r1, [pc, #116]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <HAL_RCC_OscConfig+0x480>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fe ff2f 	bl	8002164 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330a:	f7fe ff2b 	bl	8002164 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e020      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x41a>
 8003328:	e018      	b.n	800335c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_RCC_OscConfig+0x480>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fe ff18 	bl	8002164 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003338:	f7fe ff14 	bl	8002164 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e009      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_RCC_OscConfig+0x47c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x448>
 8003356:	e001      	b.n	800335c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40007000 	.word	0x40007000
 800336c:	40023800 	.word	0x40023800
 8003370:	42470060 	.word	0x42470060

08003374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0ca      	b.n	800351e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b67      	ldr	r3, [pc, #412]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d90c      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b64      	ldr	r3, [pc, #400]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b62      	ldr	r3, [pc, #392]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0b6      	b.n	800351e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c8:	4b58      	ldr	r3, [pc, #352]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a57      	ldr	r2, [pc, #348]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e0:	4b52      	ldr	r3, [pc, #328]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a51      	ldr	r2, [pc, #324]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	4b4f      	ldr	r3, [pc, #316]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	494c      	ldr	r1, [pc, #304]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d044      	beq.n	8003494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b46      	ldr	r3, [pc, #280]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d119      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e07d      	b.n	800351e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d003      	beq.n	8003432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342e:	2b03      	cmp	r3, #3
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06d      	b.n	800351e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b3a      	ldr	r3, [pc, #232]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e065      	b.n	800351e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b36      	ldr	r3, [pc, #216]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4933      	ldr	r1, [pc, #204]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003464:	f7fe fe7e 	bl	8002164 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	e00a      	b.n	8003482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346c:	f7fe fe7a 	bl	8002164 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e04d      	b.n	800351e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b2a      	ldr	r3, [pc, #168]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d1eb      	bne.n	800346c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d20c      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b1f      	ldr	r3, [pc, #124]	; (8003528 <HAL_RCC_ClockConfig+0x1b4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e030      	b.n	800351e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c8:	4b18      	ldr	r3, [pc, #96]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4915      	ldr	r1, [pc, #84]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	490d      	ldr	r1, [pc, #52]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034fa:	f000 f81d 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034fe:	4601      	mov	r1, r0
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	4a09      	ldr	r2, [pc, #36]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	5cd3      	ldrb	r3, [r2, r3]
 800350e:	fa21 f303 	lsr.w	r3, r1, r3
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003516:	2000      	movs	r0, #0
 8003518:	f7fe fde0 	bl	80020dc <HAL_InitTick>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023c00 	.word	0x40023c00
 800352c:	40023800 	.word	0x40023800
 8003530:	08004640 	.word	0x08004640
 8003534:	20000000 	.word	0x20000000

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	2300      	movs	r3, #0
 8003548:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800354e:	4b63      	ldr	r3, [pc, #396]	; (80036dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b04      	cmp	r3, #4
 8003558:	d007      	beq.n	800356a <HAL_RCC_GetSysClockFreq+0x32>
 800355a:	2b08      	cmp	r3, #8
 800355c:	d008      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x38>
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 80b4 	bne.w	80036cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b5e      	ldr	r3, [pc, #376]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003566:	60bb      	str	r3, [r7, #8]
       break;
 8003568:	e0b3      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800356a:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800356c:	60bb      	str	r3, [r7, #8]
      break;
 800356e:	e0b0      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003570:	4b5a      	ldr	r3, [pc, #360]	; (80036dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800357a:	4b58      	ldr	r3, [pc, #352]	; (80036dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d04a      	beq.n	800361c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003586:	4b55      	ldr	r3, [pc, #340]	; (80036dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	f04f 0400 	mov.w	r4, #0
 8003590:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	ea03 0501 	and.w	r5, r3, r1
 800359c:	ea04 0602 	and.w	r6, r4, r2
 80035a0:	4629      	mov	r1, r5
 80035a2:	4632      	mov	r2, r6
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	f04f 0400 	mov.w	r4, #0
 80035ac:	0154      	lsls	r4, r2, #5
 80035ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035b2:	014b      	lsls	r3, r1, #5
 80035b4:	4619      	mov	r1, r3
 80035b6:	4622      	mov	r2, r4
 80035b8:	1b49      	subs	r1, r1, r5
 80035ba:	eb62 0206 	sbc.w	r2, r2, r6
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	f04f 0400 	mov.w	r4, #0
 80035c6:	0194      	lsls	r4, r2, #6
 80035c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035cc:	018b      	lsls	r3, r1, #6
 80035ce:	1a5b      	subs	r3, r3, r1
 80035d0:	eb64 0402 	sbc.w	r4, r4, r2
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	00e2      	lsls	r2, r4, #3
 80035de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035e2:	00d9      	lsls	r1, r3, #3
 80035e4:	460b      	mov	r3, r1
 80035e6:	4614      	mov	r4, r2
 80035e8:	195b      	adds	r3, r3, r5
 80035ea:	eb44 0406 	adc.w	r4, r4, r6
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	0262      	lsls	r2, r4, #9
 80035f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80035fc:	0259      	lsls	r1, r3, #9
 80035fe:	460b      	mov	r3, r1
 8003600:	4614      	mov	r4, r2
 8003602:	4618      	mov	r0, r3
 8003604:	4621      	mov	r1, r4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f04f 0400 	mov.w	r4, #0
 800360c:	461a      	mov	r2, r3
 800360e:	4623      	mov	r3, r4
 8003610:	f7fd fa88 	bl	8000b24 <__aeabi_uldivmod>
 8003614:	4603      	mov	r3, r0
 8003616:	460c      	mov	r4, r1
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e049      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361c:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	f04f 0400 	mov.w	r4, #0
 8003626:	f240 11ff 	movw	r1, #511	; 0x1ff
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	ea03 0501 	and.w	r5, r3, r1
 8003632:	ea04 0602 	and.w	r6, r4, r2
 8003636:	4629      	mov	r1, r5
 8003638:	4632      	mov	r2, r6
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	f04f 0400 	mov.w	r4, #0
 8003642:	0154      	lsls	r4, r2, #5
 8003644:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003648:	014b      	lsls	r3, r1, #5
 800364a:	4619      	mov	r1, r3
 800364c:	4622      	mov	r2, r4
 800364e:	1b49      	subs	r1, r1, r5
 8003650:	eb62 0206 	sbc.w	r2, r2, r6
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	f04f 0400 	mov.w	r4, #0
 800365c:	0194      	lsls	r4, r2, #6
 800365e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003662:	018b      	lsls	r3, r1, #6
 8003664:	1a5b      	subs	r3, r3, r1
 8003666:	eb64 0402 	sbc.w	r4, r4, r2
 800366a:	f04f 0100 	mov.w	r1, #0
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	00e2      	lsls	r2, r4, #3
 8003674:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003678:	00d9      	lsls	r1, r3, #3
 800367a:	460b      	mov	r3, r1
 800367c:	4614      	mov	r4, r2
 800367e:	195b      	adds	r3, r3, r5
 8003680:	eb44 0406 	adc.w	r4, r4, r6
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	02a2      	lsls	r2, r4, #10
 800368e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003692:	0299      	lsls	r1, r3, #10
 8003694:	460b      	mov	r3, r1
 8003696:	4614      	mov	r4, r2
 8003698:	4618      	mov	r0, r3
 800369a:	4621      	mov	r1, r4
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f04f 0400 	mov.w	r4, #0
 80036a2:	461a      	mov	r2, r3
 80036a4:	4623      	mov	r3, r4
 80036a6:	f7fd fa3d 	bl	8000b24 <__aeabi_uldivmod>
 80036aa:	4603      	mov	r3, r0
 80036ac:	460c      	mov	r4, r1
 80036ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	60bb      	str	r3, [r7, #8]
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ce:	60bb      	str	r3, [r7, #8]
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	68bb      	ldr	r3, [r7, #8]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	007a1200 	.word	0x007a1200

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003704:	f7ff fff0 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003708:	4601      	mov	r1, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a9b      	lsrs	r3, r3, #10
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4a03      	ldr	r2, [pc, #12]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003716:	5cd3      	ldrb	r3, [r2, r3]
 8003718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	08004650 	.word	0x08004650

08003728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800372c:	f7ff ffdc 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003730:	4601      	mov	r1, r0
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	0b5b      	lsrs	r3, r3, #13
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	4a03      	ldr	r2, [pc, #12]	; (800374c <HAL_RCC_GetPCLK2Freq+0x24>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	08004650 	.word	0x08004650

08003750 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e01d      	b.n	800379e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe fa68 	bl	8001c4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f000 fa3c 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2201      	movs	r2, #1
 80037b8:	6839      	ldr	r1, [r7, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fc32 	bl	8004024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a10      	ldr	r2, [pc, #64]	; (8003808 <HAL_TIM_PWM_Start+0x60>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d107      	bne.n	80037da <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b06      	cmp	r3, #6
 80037ea:	d007      	beq.n	80037fc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000

0800380c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d122      	bne.n	8003868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d11b      	bne.n	8003868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0202 	mvn.w	r2, #2
 8003838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f9be 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f9b0 	bl	8003bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f9c1 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d122      	bne.n	80038bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d11b      	bne.n	80038bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0204 	mvn.w	r2, #4
 800388c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f994 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f986 	bl	8003bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f997 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d122      	bne.n	8003910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d11b      	bne.n	8003910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0208 	mvn.w	r2, #8
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2204      	movs	r2, #4
 80038e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f96a 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f95c 	bl	8003bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f96d 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b10      	cmp	r3, #16
 800391c:	d122      	bne.n	8003964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b10      	cmp	r3, #16
 800392a:	d11b      	bne.n	8003964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0210 	mvn.w	r2, #16
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2208      	movs	r2, #8
 800393a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f940 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f932 	bl	8003bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f943 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d10e      	bne.n	8003990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0201 	mvn.w	r2, #1
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f90c 	bl	8003ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b80      	cmp	r3, #128	; 0x80
 800399c:	d10e      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fba8 	bl	800410c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d10e      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d107      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f908 	bl	8003bf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d10e      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d107      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0220 	mvn.w	r2, #32
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb72 	bl	80040f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e0b4      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b0c      	cmp	r3, #12
 8003a4a:	f200 809f 	bhi.w	8003b8c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a89 	.word	0x08003a89
 8003a58:	08003b8d 	.word	0x08003b8d
 8003a5c:	08003b8d 	.word	0x08003b8d
 8003a60:	08003b8d 	.word	0x08003b8d
 8003a64:	08003ac9 	.word	0x08003ac9
 8003a68:	08003b8d 	.word	0x08003b8d
 8003a6c:	08003b8d 	.word	0x08003b8d
 8003a70:	08003b8d 	.word	0x08003b8d
 8003a74:	08003b0b 	.word	0x08003b0b
 8003a78:	08003b8d 	.word	0x08003b8d
 8003a7c:	08003b8d 	.word	0x08003b8d
 8003a80:	08003b8d 	.word	0x08003b8d
 8003a84:	08003b4b 	.word	0x08003b4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f93c 	bl	8003d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0208 	orr.w	r2, r2, #8
 8003aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0204 	bic.w	r2, r2, #4
 8003ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6999      	ldr	r1, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	619a      	str	r2, [r3, #24]
      break;
 8003ac6:	e062      	b.n	8003b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f982 	bl	8003dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6999      	ldr	r1, [r3, #24]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	021a      	lsls	r2, r3, #8
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	619a      	str	r2, [r3, #24]
      break;
 8003b08:	e041      	b.n	8003b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f9cd 	bl	8003eb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0208 	orr.w	r2, r2, #8
 8003b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0204 	bic.w	r2, r2, #4
 8003b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69d9      	ldr	r1, [r3, #28]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	61da      	str	r2, [r3, #28]
      break;
 8003b48:	e021      	b.n	8003b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fa17 	bl	8003f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69d9      	ldr	r1, [r3, #28]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	021a      	lsls	r2, r3, #8
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	61da      	str	r2, [r3, #28]
      break;
 8003b8a:	e000      	b.n	8003b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003b8c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a34      	ldr	r2, [pc, #208]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00f      	beq.n	8003c44 <TIM_Base_SetConfig+0x38>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2a:	d00b      	beq.n	8003c44 <TIM_Base_SetConfig+0x38>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a31      	ldr	r2, [pc, #196]	; (8003cf4 <TIM_Base_SetConfig+0xe8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <TIM_Base_SetConfig+0x38>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a30      	ldr	r2, [pc, #192]	; (8003cf8 <TIM_Base_SetConfig+0xec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_Base_SetConfig+0x38>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a2f      	ldr	r2, [pc, #188]	; (8003cfc <TIM_Base_SetConfig+0xf0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d108      	bne.n	8003c56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01b      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c64:	d017      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <TIM_Base_SetConfig+0xe8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <TIM_Base_SetConfig+0xec>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00f      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <TIM_Base_SetConfig+0xf0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <TIM_Base_SetConfig+0xf4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <TIM_Base_SetConfig+0xf8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_Base_SetConfig+0x8a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <TIM_Base_SetConfig+0xfc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d108      	bne.n	8003ca8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d103      	bne.n	8003cdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40014800 	.word	0x40014800

08003d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 0302 	bic.w	r3, r3, #2
 8003d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <TIM_OC1_SetConfig+0xc8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10c      	bne.n	8003d82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0308 	bic.w	r3, r3, #8
 8003d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <TIM_OC1_SetConfig+0xc8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d111      	bne.n	8003dae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	621a      	str	r2, [r3, #32]
}
 8003dc8:	bf00      	nop
 8003dca:	371c      	adds	r7, #28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40010000 	.word	0x40010000

08003dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0210 	bic.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0320 	bic.w	r3, r3, #32
 8003e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <TIM_OC2_SetConfig+0xd4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d10d      	bne.n	8003e54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a15      	ldr	r2, [pc, #84]	; (8003eac <TIM_OC2_SetConfig+0xd4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d113      	bne.n	8003e84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000

08003eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <TIM_OC3_SetConfig+0xd0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d10d      	bne.n	8003f2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <TIM_OC3_SetConfig+0xd0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d113      	bne.n	8003f5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	621a      	str	r2, [r3, #32]
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40010000 	.word	0x40010000

08003f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	031b      	lsls	r3, r3, #12
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a10      	ldr	r2, [pc, #64]	; (8004020 <TIM_OC4_SetConfig+0x9c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d109      	bne.n	8003ff8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	019b      	lsls	r3, r3, #6
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40010000 	.word	0x40010000

08004024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2201      	movs	r2, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	43db      	mvns	r3, r3
 8004046:	401a      	ands	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004082:	2302      	movs	r3, #2
 8004084:	e032      	b.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040be:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e03f      	b.n	80041b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fe88 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2224      	movs	r2, #36	; 0x24
 8004150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f829 	bl	80041bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041bc:	b5b0      	push	{r4, r5, r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041fc:	f023 030c 	bic.w	r3, r3, #12
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	68f9      	ldr	r1, [r7, #12]
 8004206:	430b      	orrs	r3, r1
 8004208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004228:	f040 80e4 	bne.w	80043f4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4aab      	ldr	r2, [pc, #684]	; (80044e0 <UART_SetConfig+0x324>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <UART_SetConfig+0x84>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4aaa      	ldr	r2, [pc, #680]	; (80044e4 <UART_SetConfig+0x328>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d16c      	bne.n	800431a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004240:	f7ff fa72 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8004244:	4602      	mov	r2, r0
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009a      	lsls	r2, r3, #2
 800424e:	441a      	add	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	4aa3      	ldr	r2, [pc, #652]	; (80044e8 <UART_SetConfig+0x32c>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	011c      	lsls	r4, r3, #4
 8004264:	f7ff fa60 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8004268:	4602      	mov	r2, r0
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009a      	lsls	r2, r3, #2
 8004272:	441a      	add	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fbb2 f5f3 	udiv	r5, r2, r3
 800427e:	f7ff fa53 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8004282:	4602      	mov	r2, r0
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009a      	lsls	r2, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	4a93      	ldr	r2, [pc, #588]	; (80044e8 <UART_SetConfig+0x32c>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2264      	movs	r2, #100	; 0x64
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	1aeb      	subs	r3, r5, r3
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	3332      	adds	r3, #50	; 0x32
 80042ac:	4a8e      	ldr	r2, [pc, #568]	; (80044e8 <UART_SetConfig+0x32c>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ba:	441c      	add	r4, r3
 80042bc:	f7ff fa34 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009a      	lsls	r2, r3, #2
 80042ca:	441a      	add	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80042d6:	f7ff fa27 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 80042da:	4602      	mov	r2, r0
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009a      	lsls	r2, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	4a7d      	ldr	r2, [pc, #500]	; (80044e8 <UART_SetConfig+0x32c>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2264      	movs	r2, #100	; 0x64
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	1aeb      	subs	r3, r5, r3
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	3332      	adds	r3, #50	; 0x32
 8004304:	4a78      	ldr	r2, [pc, #480]	; (80044e8 <UART_SetConfig+0x32c>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	f003 0207 	and.w	r2, r3, #7
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4422      	add	r2, r4
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	e154      	b.n	80045c4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800431a:	f7ff f9f1 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 800431e:	4602      	mov	r2, r0
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009a      	lsls	r2, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	4a6c      	ldr	r2, [pc, #432]	; (80044e8 <UART_SetConfig+0x32c>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	011c      	lsls	r4, r3, #4
 800433e:	f7ff f9df 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 8004342:	4602      	mov	r2, r0
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009a      	lsls	r2, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fbb2 f5f3 	udiv	r5, r2, r3
 8004358:	f7ff f9d2 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 800435c:	4602      	mov	r2, r0
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	009a      	lsls	r2, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	4a5d      	ldr	r2, [pc, #372]	; (80044e8 <UART_SetConfig+0x32c>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	2264      	movs	r2, #100	; 0x64
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	1aeb      	subs	r3, r5, r3
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	3332      	adds	r3, #50	; 0x32
 8004386:	4a58      	ldr	r2, [pc, #352]	; (80044e8 <UART_SetConfig+0x32c>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004394:	441c      	add	r4, r3
 8004396:	f7ff f9b3 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 800439a:	4602      	mov	r2, r0
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009a      	lsls	r2, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80043b0:	f7ff f9a6 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	009a      	lsls	r2, r3, #2
 80043be:	441a      	add	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	4a47      	ldr	r2, [pc, #284]	; (80044e8 <UART_SetConfig+0x32c>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	2264      	movs	r2, #100	; 0x64
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	1aeb      	subs	r3, r5, r3
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	3332      	adds	r3, #50	; 0x32
 80043de:	4a42      	ldr	r2, [pc, #264]	; (80044e8 <UART_SetConfig+0x32c>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	f003 0207 	and.w	r2, r3, #7
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4422      	add	r2, r4
 80043f0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80043f2:	e0e7      	b.n	80045c4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a39      	ldr	r2, [pc, #228]	; (80044e0 <UART_SetConfig+0x324>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <UART_SetConfig+0x24c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a38      	ldr	r2, [pc, #224]	; (80044e4 <UART_SetConfig+0x328>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d171      	bne.n	80044ec <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004408:	f7ff f98e 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 800440c:	4602      	mov	r2, r0
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009a      	lsls	r2, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	4a31      	ldr	r2, [pc, #196]	; (80044e8 <UART_SetConfig+0x32c>)
 8004424:	fba2 2303 	umull	r2, r3, r2, r3
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	011c      	lsls	r4, r3, #4
 800442c:	f7ff f97c 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8004430:	4602      	mov	r2, r0
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009a      	lsls	r2, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	fbb2 f5f3 	udiv	r5, r2, r3
 8004446:	f7ff f96f 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 800444a:	4602      	mov	r2, r0
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <UART_SetConfig+0x32c>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2264      	movs	r2, #100	; 0x64
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	1aeb      	subs	r3, r5, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <UART_SetConfig+0x32c>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	441c      	add	r4, r3
 8004482:	f7ff f951 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8004486:	4602      	mov	r2, r0
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	009a      	lsls	r2, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	fbb2 f5f3 	udiv	r5, r2, r3
 800449c:	f7ff f944 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009a      	lsls	r2, r3, #2
 80044aa:	441a      	add	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	4a0c      	ldr	r2, [pc, #48]	; (80044e8 <UART_SetConfig+0x32c>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	2264      	movs	r2, #100	; 0x64
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
 80044c4:	1aeb      	subs	r3, r5, r3
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	3332      	adds	r3, #50	; 0x32
 80044ca:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <UART_SetConfig+0x32c>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	f003 020f 	and.w	r2, r3, #15
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4422      	add	r2, r4
 80044dc:	609a      	str	r2, [r3, #8]
 80044de:	e071      	b.n	80045c4 <UART_SetConfig+0x408>
 80044e0:	40011000 	.word	0x40011000
 80044e4:	40011400 	.word	0x40011400
 80044e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80044ec:	f7ff f908 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80044f0:	4602      	mov	r2, r0
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009a      	lsls	r2, r3, #2
 80044fa:	441a      	add	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	4a31      	ldr	r2, [pc, #196]	; (80045cc <UART_SetConfig+0x410>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	011c      	lsls	r4, r3, #4
 8004510:	f7ff f8f6 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 8004514:	4602      	mov	r2, r0
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009a      	lsls	r2, r3, #2
 800451e:	441a      	add	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	fbb2 f5f3 	udiv	r5, r2, r3
 800452a:	f7ff f8e9 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 800452e:	4602      	mov	r2, r0
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009a      	lsls	r2, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	4a21      	ldr	r2, [pc, #132]	; (80045cc <UART_SetConfig+0x410>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2264      	movs	r2, #100	; 0x64
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	1aeb      	subs	r3, r5, r3
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	3332      	adds	r3, #50	; 0x32
 8004558:	4a1c      	ldr	r2, [pc, #112]	; (80045cc <UART_SetConfig+0x410>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004564:	441c      	add	r4, r3
 8004566:	f7ff f8cb 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 800456a:	4602      	mov	r2, r0
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009a      	lsls	r2, r3, #2
 8004574:	441a      	add	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004580:	f7ff f8be 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 8004584:	4602      	mov	r2, r0
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	009a      	lsls	r2, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <UART_SetConfig+0x410>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	2264      	movs	r2, #100	; 0x64
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
 80045a8:	1aeb      	subs	r3, r5, r3
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	3332      	adds	r3, #50	; 0x32
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <UART_SetConfig+0x410>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	f003 020f 	and.w	r2, r3, #15
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4422      	add	r2, r4
 80045c0:	609a      	str	r2, [r3, #8]
}
 80045c2:	e7ff      	b.n	80045c4 <UART_SetConfig+0x408>
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bdb0      	pop	{r4, r5, r7, pc}
 80045cc:	51eb851f 	.word	0x51eb851f

080045d0 <__libc_init_array>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4e0d      	ldr	r6, [pc, #52]	; (8004608 <__libc_init_array+0x38>)
 80045d4:	4c0d      	ldr	r4, [pc, #52]	; (800460c <__libc_init_array+0x3c>)
 80045d6:	1ba4      	subs	r4, r4, r6
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	2500      	movs	r5, #0
 80045dc:	42a5      	cmp	r5, r4
 80045de:	d109      	bne.n	80045f4 <__libc_init_array+0x24>
 80045e0:	4e0b      	ldr	r6, [pc, #44]	; (8004610 <__libc_init_array+0x40>)
 80045e2:	4c0c      	ldr	r4, [pc, #48]	; (8004614 <__libc_init_array+0x44>)
 80045e4:	f000 f820 	bl	8004628 <_init>
 80045e8:	1ba4      	subs	r4, r4, r6
 80045ea:	10a4      	asrs	r4, r4, #2
 80045ec:	2500      	movs	r5, #0
 80045ee:	42a5      	cmp	r5, r4
 80045f0:	d105      	bne.n	80045fe <__libc_init_array+0x2e>
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045f8:	4798      	blx	r3
 80045fa:	3501      	adds	r5, #1
 80045fc:	e7ee      	b.n	80045dc <__libc_init_array+0xc>
 80045fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004602:	4798      	blx	r3
 8004604:	3501      	adds	r5, #1
 8004606:	e7f2      	b.n	80045ee <__libc_init_array+0x1e>
 8004608:	08004660 	.word	0x08004660
 800460c:	08004660 	.word	0x08004660
 8004610:	08004660 	.word	0x08004660
 8004614:	08004664 	.word	0x08004664

08004618 <memset>:
 8004618:	4402      	add	r2, r0
 800461a:	4603      	mov	r3, r0
 800461c:	4293      	cmp	r3, r2
 800461e:	d100      	bne.n	8004622 <memset+0xa>
 8004620:	4770      	bx	lr
 8004622:	f803 1b01 	strb.w	r1, [r3], #1
 8004626:	e7f9      	b.n	800461c <memset+0x4>

08004628 <_init>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr

08004634 <_fini>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr
